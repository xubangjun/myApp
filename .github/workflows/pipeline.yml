name: CI Pipeline

on:
  pull_request:
    branches:
      - main  # 当 PR 合并到 main 分支时触发（可替换为你的主分支名称）
  push:
    branches:
      - '*'
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK (if running tests for a Java project)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      # Run tests
      - name: Run Tests
        run: mvn test # 替换为你的测试命令，比如 ./gradlew test 或其他语言的测试命令
  # Job 1: Maven Build
  maven_build:
    runs-on: ubuntu-latest  # 使用 Ubuntu 虚拟机
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (or any version you need)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # 设置 JDK 版本
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run Maven build (mvn clean package)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: maven-artifacts
          path: target/

      - name: List target directory
        run: ls -l
  run_sql:
    name: Run All SQL Files
    runs-on: ubuntu-latest
    needs: maven_build  # This job depends on the maven_build job

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydatabase
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for PostgreSQL to be ready
        run: |
          dockerize -wait tcp://localhost:5432 -timeout 2m

      - name: Install PostgreSQL client
        run: sudo apt-get install postgresql-client

      - name: Run All SQL Files from Resources Folder
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: xubangjun886
          DB_NAME: mydatabase
        run: |
          # Find all .sql files under the resources folder and run each of them
          find src/main/resources -type f -name "*.sql" | while read sql_file; do
            echo "Running SQL file: $sql_file"
            # Copy the SQL file to a temporary location to make sure it's accessible
            cp "$sql_file" /tmp/
            # Execute the SQL file using psql
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -f /tmp/$(basename "$sql_file")
          done
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: maven_build  # 依赖测试任务，只有测试成功后才会执行
#    if: github.ref == 'refs/heads/main'

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: maven-artifacts

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      #
      - name: List target directory
        run: ls -l

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: "docker-container"
      # Build Docker image with multi-platform support
      - name: Build Docker Image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t xubangjun/my-java-app:${{ env.SHORT_SHA }} --push .
#      # Build Docker image
#      - name: Build Docker Image
#        run: docker build -t xubangjun/my-java-app:${{ env.SHORT_SHA }} .
#
#      # Push Docker image to DockerHub
#      - name: Push Docker Image
#        run: docker push xubangjun/my-java-app:${{ env.SHORT_SHA }}
